{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/postCard.js","webpack:///./src/templates/postTemplate.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","createContext","formatePostDate","dateString","date","Date","toLocaleDateString","month","day","year","data","style","useThemeContext","layout","useSiteMetadata","post","markdownRemark","className","metaData","color","icon","ChevronLeft","size","verticalAlign","ariaLabel","to","frontmatter","title","dangerouslySetInnerHTML","__html","html","backgroundColor","maxWidth","fields","postDate","query","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"oKAcyBA,QAAOC,QAELC,IAAMC,cAAc,I,gECZxC,SAASC,EAAgBC,GAC9B,IAAMC,EAAO,IAAIC,KAAKF,GACtB,OAAUC,EAAKE,mBAAmB,QAAS,CACzCC,MAAO,UADT,IAEMH,EAAKE,mBAAmB,QAAS,CACrCE,IAAK,YAHP,KAIOJ,EAAKE,mBAAmB,QAAS,CAAEG,KAAM,YCVlD,sCASe,sBAAe,IAAZC,EAAW,EAAXA,KACRC,EAAUC,cAAVD,MACAE,EAAWC,cAAXD,OACFE,EAAOL,EAAKM,eAClB,OACE,kBAAC,IAAD,KACc,YAAXH,EACC,yBAAKI,UAAU,8CACb,kBAAC,IAAD,CAAUC,UAAU,IACpB,yBAAKD,UAAU,uEACb,uBAAGA,UAAU,MACX,0BACEA,UAAU,2BACVN,MAAO,CAAEQ,MAAO,YAEhB,kBAAC,IAAD,CACEC,KAAMC,IACNC,KAAM,GACNC,cAAc,SACdC,UAAU,OACVP,UAAU,SAEZ,kBAAC,IAAD,CAAMQ,GAAG,KAAT,UAGJ,wBAAIR,UAAU,0BAA0BF,EAAKW,YAAYC,OACzD,uBACEV,UAAS,SACG,SAAVN,EAAmB,aAAe,cAFtC,aAOA,yBAAKiB,wBAAyB,CAAEC,OAAQd,EAAKe,UAIjD,yBACEb,UAAS,cAAyB,SAAVN,EAAmB,mBAAqB,KAEhE,yBACEM,UAAS,sBACG,SAAVN,EACI,eACA,8CAHG,yDAMT,kBAAC,IAAD,CAAUO,UAAU,KAGtB,yBACED,UAAU,0EACVN,MAAO,CACLoB,gBAA2B,SAAVpB,EAAmB,UAAY,YAGlD,yBAAKM,UAAU,UAAUN,MAAO,CAAEqB,SAAU,UAC1C,yBACEf,UAAS,OAAkB,SAAVN,EAAmB,aAAe,IAA1C,SAET,yBAAKM,UAAS,OAAkB,SAAVN,GAAoB,eACxC,uBAAGM,UAAU,MACX,0BACEA,UAAU,2BACVN,MAAO,CAAEQ,MAAO,YAEhB,kBAAC,IAAD,CACEM,GAAG,IACHR,UAAS,6BACP,SADqCN,GAC3B,eAEZ,kBAAC,IAAD,CACES,KAAMC,IACNC,KAAM,GACNC,cAAc,SACdC,UAAU,OACVP,UAAU,SAVd,UAgBJ,wBAAIA,UAAU,0BACXF,EAAKW,YAAYC,OAEpB,uBACEV,WACY,SAAVN,EAAmB,aAAe,aAD3B,SADX,aAKaT,EAAgB,GAAGa,EAAKkB,OAAOC,WAE5C,yBAAKN,wBAAyB,CAAEC,OAAQd,EAAKe,eA5FhD,IAuGFK,EAAK,a,qBChHlB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGE3C,IAAM4C,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-templates-post-template-js-b337a97282af02d97d8f.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport useThemeContext from \"../hooks/themeContext\"\n\nexport function formatePostDate(dateString) {\n  const date = new Date(dateString)\n  return `${date.toLocaleDateString(\"en-GB\", {\n    month: \"short\",\n  })} ${date.toLocaleDateString(\"en-GB\", {\n    day: \"numeric\",\n  })}, ${date.toLocaleDateString(\"en-GB\", { year: \"numeric\" })}`\n}\n\nfunction PostCard({ post }) {\n  const { style } = useThemeContext()\n  return (\n    <div\n      className={`height-full text-left ${\n        style === \"dark\" ? \"box-shadow\" : \"border border - gray - light\"\n      } bg-white rounded-1 p-3`}\n    >\n      <div className=\"d-flex flex-justify-between flex-items-start mb-1\">\n        <h1 className=\"f4 lh-condensed mb-1\">\n          <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n        </h1>\n      </div>\n      <div className=\"text-gray mb-2 ws-normal\">\n        {formatePostDate(`${post.fields.postDate}`)}\n      </div>\n    </div>\n  )\n}\n\nexport default PostCard\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Octicon, { ChevronLeft } from \"@primer/octicons-react\"\nimport Layout from \"../components/layout\"\nimport MastHead from \"../components/mastHead\"\nimport useSiteMetadata from \"../hooks/siteMetaData\"\nimport useThemeContext from \"../hooks/themeContext\"\nimport { formatePostDate } from \"../components/postCard\"\n\nexport default ({ data }) => {\n  const { style } = useThemeContext()\n  const { layout } = useSiteMetadata()\n  const post = data.markdownRemark\n  return (\n    <Layout>\n      {layout === \"stacked\" ? (\n        <div className=\"container-lg py-6 p-responsive text-center\">\n          <MastHead metaData={false} />\n          <div className=\"container-md f4 text-left border rounded-2 bg-white p-3 p-sm-5 mt-6\">\n            <p className=\"f5\">\n              <span\n                className=\"d-flex flex-items-center\"\n                style={{ color: \"#0366d6\" }}\n              >\n                <Octicon\n                  icon={ChevronLeft}\n                  size={16}\n                  verticalAlign=\"middle\"\n                  ariaLabel=\"Home\"\n                  className=\"mr-2\"\n                />\n                <Link to=\"/\">Home</Link>\n              </span>\n            </p>\n            <h1 className=\"f00-light lh-condensed\">{post.frontmatter.title}</h1>\n            <p\n              className={`mb-5 ${\n                style === \"dark\" ? \"text-white\" : \"text-gray\"\n              }`}\n            >\n              Published\n            </p>\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\n          </div>\n        </div>\n      ) : (\n        <div\n          className={`d-md-flex ${style !== \"dark\" ? \"border-md-bottom\" : \"\"}`}\n        >\n          <div\n            className={`flex-self-stretch ${\n              style === \"dark\"\n                ? \"bg-gray-dark\"\n                : \"border-md-right border-gray-light bg-white\"\n            } col-md-5 col-lg-4 col-xl-3 px-4 px-md-6 px-lg-7 py-6`}\n          >\n            <MastHead metaData={true} />\n          </div>\n\n          <div\n            className=\"col-md-7 col-lg-8 col-xl-9 px-4 py-6 px-lg-7 border-top border-md-top-0\"\n            style={{\n              backgroundColor: style === \"dark\" ? \"#2f363d\" : \"#fafbfc\",\n            }}\n          >\n            <div className=\"mx-auto\" style={{ maxWidth: \"900px\" }}>\n              <div\n                className={`f4 ${style === \"dark\" ? \"text-white\" : \"\"} mb-6`}\n              >\n                <div className={`f4 ${style === \"dark\" && \"text-white\"}`}>\n                  <p className=\"f5\">\n                    <span\n                      className=\"d-flex flex-items-center\"\n                      style={{ color: \"#0366d6\" }}\n                    >\n                      <Link\n                        to=\"/\"\n                        className={`d-flex flex-items-center ${style ===\n                          \"dark\" && \"text-white\"}`}\n                      >\n                        <Octicon\n                          icon={ChevronLeft}\n                          size={16}\n                          verticalAlign=\"middle\"\n                          ariaLabel=\"Home\"\n                          className=\"mr-2\"\n                        />\n                        Home\n                      </Link>\n                    </span>\n                  </p>\n                  <h1 className=\"f00-light lh-condensed\">\n                    {post.frontmatter.title}\n                  </h1>\n                  <p\n                    className={`${\n                      style === \"dark\" ? \"text-white\" : \"text-gray\"\n                    } mb-5`}\n                  >\n                    Published {formatePostDate(`${post.fields.postDate}`)}\n                  </p>\n                  <div dangerouslySetInnerHTML={{ __html: post.html }} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n      fields {\n        postDate\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}